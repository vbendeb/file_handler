#!/usr/bin/python

import argparse
import calendar
import glob
import os
import shutil
import struct
import subprocess
import sys
import tempfile
import time


def prepare_argparser():
    parser = argparse.ArgumentParser(description=
                                     "Utility for copying files into "
                                     "directories based on file date")
    parser.add_argument('-a', '--add', action='store_true',
                        help='if specified - add files to existing directories')
    parser.add_argument('-t', '--time_offset', action='store',
                        help='if specified - '
                        'time offset, hours to add to the photo timestamps')

    return parser

class ImageFile(object):
    def __init__(self, imf, to_value):
        self.valid = False
        self.year = 0
        self.month = 0
        self.day = 0
        self.fd = imf  # Image file descriptor
        self.endian = '>'
        self.debug = False
        self.seek_offset = 0
        self.jpg = False

        order, magic = self.get_data('2H')

        if order == 0xffd8:
            # this must be a JPEG file
            self.seek_offset = 4 # We read 4 bytes so far
            while magic != 0xffe1:
                if (magic & 0xffe0) != 0xffe0:
                    print >> sys.stderr, 'Could not find exif header'
                    return
                size, = self.get_data('H')
                self.seek_offset += size
                self.fd.seek(self.seek_offset)
                magic, = self.get_data('H')
                self.seek_offset += 2 # Account for the new header.

            self.seek_offset += 8
            _, order, magic = self.get_data('Q2H')
            self.jpg = True

        if order == 0x4949:
            if magic != 0x2a00:
                return
            self.endian = '<'
        else:
            if order != 0x4d4d or magic != 0x2a:
                return

        tiff_offset, = self.get_data('I')

        if tiff_offset == to_value:
            self.valid = True

    def get_data(self, format):
        return struct.unpack(self.endian + format,
                             self.fd.read(struct.calcsize(format)))

    def process_file(self, time_offset):
        self.parse_ifds(time_offset)

    def is_valid(self):
        return self.valid

    def is_jpg(self):
        return self.valid and self.jpg

    def process_timestamp(self, exif_time, time_offset):
        # Full data string is like '2017:08:06 10:05:12'
        if not time_offset:
            # No need to adjust time, just the exif value.
            timestamp = exif_time.split()[0]
            year, month, day = timestamp.split(':')
            self.year = int(year)
            self.month = int(month)
            self.day = int(day)
            return

        # Need to adjust by time offset.
        times = time.strptime(exif_time.strip(), '%Y:%m:%d %H:%M:%S')
        epoch = calendar.timegm(times)
        times = time.gmtime(epoch + time_offset * 3600)
        self.year = times.tm_year
        self.month = times.tm_mon
        self.day = times.tm_mday

    def parse_ifds(self, time_offset):
        while True:
            num_entries, = self.get_data('H')
            while num_entries:
                tag_id, tag_type, num, ptr = self.get_data('HHII')
                if tag_id == 306: # this is the timestamp
                    self.fd.seek(self.seek_offset + ptr)
                    # Drop the trailing \0 character.
                    self.process_timestamp(self.get_data('%ds' % num)[0][:-1],
                                           time_offset)
                    return
                num_entries = num_entries - 1
            ifd_offset, = self.get_data('I')
            if not ifd_offset or not self.chained_ifds:
                break
            self.fd.seek(self.seek_offset + ifd_offset)


class NefImage(ImageFile):
    def __init__(self, imf):
        self.chained_ifds = False
        super(NefImage, self).__init__(imf, 0x8)


class Cr2Image(ImageFile):
    def __init__(self, imf):
        self.chained_ifds = True
        self.raw_ifd_offset = 0
        super(Cr2Image, self).__init__(imf, 0x10)
        if not self.valid:
            return
        magic, major, minor, ifd_offset = self.get_data('2sBBI')

        if magic != 'CR' or major != 2 or minor != 0:
            print 'cr2 magic, major, minor: %s, %d, %d\n' % (magic, major, minor)
            self.valid = False
            return
        self.raw_ifd_offset = ifd_offset


def ImageFactory(name):
    ifd = open(name, 'r')
    for image_type in (NefImage, Cr2Image):
        imf = image_type(ifd)
        if imf.is_valid():
            return imf
        ifd.seek(0)

#root = '%s/docs/pictures' % os.environ['HOME']
root = '/backup_disk/home/vbendeb/docs/pictures'
all_files = []

def get_all_files(arg, dirname, names):
    for n in names:
        full_name = os.path.join(dirname, n)
        if os.path.isfile(full_name):
            all_files.append(full_name)

def process_inputs(inputs, add_to_dirs, time_offset):
    created_dirs = {}
    for i in inputs:
        if os.path.isfile(i):
            all_files.append(i)
            continue
        os.path.walk(i, get_all_files, 0)

    if not all_files:
        print >> sys.stderr, 'no files to process found'
        sys.exit(1)

    for f in all_files:
        try:
            cr2 = ImageFactory(f)
        except struct.error:
            print >> sys.stderr, 'exception: %s is not an image' % f
            continue
        if not (cr2 and cr2.is_valid()):
            print >> sys.stderr, '%s is not an image' % f
            continue
        cr2.process_file(time_offset)
        if not cr2.year:
            print 'No timestamp found in %s' % f
            continue

        subdir = 'jpg' if cr2.is_jpg() else 'raw'
        dst = os.path.join(root, subdir,
                           '%d' % cr2.year,
                           '%d_%2.2d_%2.2d' % (cr2.year, cr2.month, cr2.day),
                           os.path.basename(f))
        if os.path.isfile(dst):
            print f, 'is already there in', dst
            continue
        dst_dir = os.path.dirname(dst)
        if not os.path.isdir(dst_dir):
            try:
                print 'creating', dst_dir
                os.makedirs(dst_dir)
            except OSError, e:
                print >> sys.stderr, ("Failed to create %s (%s)\n", (dst_dir, str(e)))
                sys.exit(1)
            created_dirs[dst_dir] = 1

        if dst_dir in created_dirs or add_to_dirs:
            print 'copying %s to %s' % (f, subdir)
            shutil.copyfile(f, dst + '.tmp')
            os.rename(dst + '.tmp', dst)
        else:
            print 'skipping', f

def mount_removable_device():
    dirs = glob.glob('/sys/block/sd*')
    for d in dirs:
        if open(os.path.join(d, 'removable')).read().strip() == '0':
            continue
        if open(os.path.join(d, 'size')).read().strip() == '0':
            continue
        dev = '/dev/%s1' % os.path.basename(d)

        mount_dir = tempfile.mkdtemp(prefix='fhandler.')
        if subprocess.call(['sudo', 'mount', dev, mount_dir]) != 0:
            print 'Failed to mount %s on %s' % (dev, mount_dir)
            sys.exit(1)
        print 'Mounted %s on %s' % (dev, mount_dir)
        return mount_dir
    print 'No removable devices found'
    sys.exit(0)

if __name__ == '__main__':
    parser = prepare_argparser()
    options, argv = parser.parse_known_args()
    time_offset = options.time_offset
    mount_dir = None
    if time_offset:
        try:
            time_offset = int(time_offset)
        except ValueError:
            print >> sys.stderr, ('%s is not a valid time offset' %
                                  options.time_offset)
            sys.exit(1)
        if time_offset > 23 or time_offset < -23:
            print >> sys.stderr, ('%s exceeds day hour range' %
                                  options.time_offset)
            sys.exit(1)
    try:
        if not len(argv):
            mount_dir = mount_removable_device()
            inputs = [mount_dir, ]
        else:
            inputs = argv
        process_inputs(inputs, options.add, time_offset)
    finally:
        if mount_dir:
            os.chdir('/tmp')
            subprocess.call(['sync',])
            if subprocess.call(['sudo', 'umount', mount_dir]) == 0:
                subprocess.call(['rm', '-rf', mount_dir])
