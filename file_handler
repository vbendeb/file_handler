#!/usr/bin/python

import glob
import os
import shutil
import struct
import subprocess
import sys
import tempfile

class ImageFile(object):
    def __init__(self, imf, to_value):
        self.valid = False
        self.year = 0
        self.month = 0
        self.day = 0
        self.fd = imf  # Image file descriptor
        self.endian = '<'
        self.debug = False
        self.seek_offset = 0

        order, magic = self.get_data('2H')

        if order == 0xd8ff and magic == 0xe1ff: # this must be a JPEG file
            _, order, magic = self.get_data('Q2H')
            self.seek_offset = 12

        if order != 0x4949 or magic != 0x2a:
            if order != 0x4d4d or magic != 0x2a00:
                return
            self.endian = '>'

        tiff_offset, = self.get_data('I')

        if tiff_offset == to_value:
            self.valid = True

    def get_data(self, format):
        real_format = '%s%s' % (self.endian, format)
        return struct.unpack(real_format,
                             self.fd.read(struct.calcsize(real_format)))

    def process_file(self):
        self.parse_ifds()

    def is_valid(self):
        return self.valid

    def parse_ifds(self):
        ifd_offset = 1 # junk
        while True:
            num_entries, = self.get_data('H')
            while num_entries:
                tag_id, tag_type, num, ptr = self.get_data('HHII')
                if tag_id == 306: # this is the timestamp
                    self.fd.seek(self.seek_offset + ptr)
                    timestamp = self.get_data('%ds' % num)[0].split()[0]
                    year, month, day = timestamp.split(':')
                    self.year = int(year)
                    self.month = int(month)
                    self.day = int(day)
                num_entries = num_entries - 1
            ifd_offset, = self.get_data('I')
            if not ifd_offset or not self.chained_ifds:
                break
            self.fd.seek(self.seek_offset + ifd_offset)


class NefImage(ImageFile):
    def __init__(self, imf):
        self.chained_ifds = False
        super(NefImage, self).__init__(imf, 0x8)


class Cr2Image(ImageFile):
    def __init__(self, imf):
        self.chained_ifds = True
        self.raw_ifd_offset = 0
        super(Cr2Image, self).__init__(imf, 0x10)
        if not self.valid:
            return
        magic, major, minor, ifd_offset = self.get_data('2sBBI')

        if magic != 'CR' or major != 2 or minor != 0:
            print 'cr2 magic, major, minor: %s, %d, %d\n' % (magic, major, minor)
            self.valid = False
            return
        self.raw_ifd_offset = ifd_offset


def ImageFactory(name):
    ifd = open(name, 'r')
    for image_type in (NefImage, Cr2Image):
        imf = image_type(ifd)
        if imf.is_valid():
            return imf
        ifd.seek(0)

#root = '%s/docs/pictures' % os.environ['HOME']
root = '/backup_disk/home/vbendeb/docs/pictures'
mount_dir = ''
all_files = []

def get_all_files(arg, dirname, names):
    for n in names:
        full_name = os.path.join(dirname, n)
        if os.path.isfile(full_name):
            all_files.append(full_name)

def process_dirs(dirs):
    for d in dirs:
        os.path.walk(d, get_all_files, 0)

    for f in all_files:
        try:
            cr2 = ImageFactory(f)
        except struct.error:
            print '%s is not an image' % f
            continue
        if not (cr2 and cr2.is_valid()):
            print '%s is not an image' % f
            continue
        cr2.process_file()
        if not cr2.year:
            print 'No timestamp found in %s' % f
            continue
        dst = os.path.join(root,
                           '%d' % cr2.year,
                           '%d_%2.2d_%2.2d' % (cr2.year, cr2.month, cr2.day),
                           os.path.basename(f))
        if os.path.isfile(dst):
            print f, 'is already there in', dst
            continue
        dst_dir = os.path.dirname(dst)
        if not os.path.isdir(dst_dir):
            print 'creating', dst_dir
            os.mkdir(dst_dir)

        print 'copying', f
        shutil.copyfile(f, dst)

def mount_removable_device():
    global mount_dir
    dirs = glob.glob('/sys/block/sd*')
    for d in dirs:
        if open(os.path.join(d, 'removable')).read().strip() == '0':
            continue
        if open(os.path.join(d, 'size')).read().strip() == '0':
            continue
        dev = '/dev/%s1' % os.path.basename(d)

        mount_dir = tempfile.mkdtemp(prefix='fhandler.')
        if subprocess.call(['sudo', 'mount', dev, mount_dir]) != 0:
            print 'Failed to mount %s on %s' % (dev, mount_dir)
            sys.exit(1)
        print 'Mounted %s on %s' % (dev, mount_dir)
        return
    print 'No removable devices found'
    sys.exit(0)

if __name__ == '__main__':
    try:
        if len(sys.argv) == 1:
            mount_removable_device()
            src_dirs = [mount_dir, ]
        else:
            src_dirs = sys.argv[1:]
        process_dirs(src_dirs)
    finally:
        if mount_dir:
            if subprocess.call(['sudo', 'umount', mount_dir]) == 0:
                subprocess.call(['rm', '-rf', mount_dir])
